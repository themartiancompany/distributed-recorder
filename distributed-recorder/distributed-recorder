#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'remote-recorder' \
    'remote-recorder'
  _check_cmd \
    'remote-encoder' \
    'remote-encoder'
}

# shellcheck disable=SC2034
_global_variables() {
  recording_date=""
  recorder_host=""
  encoder_host=""
  recording_resolution=""
  recorder_app=""
  encoder_app=""
  recording_length=""
  recording_buffer=""
  out_file=""
  bit_rate=""
  color=""
  quiet=""
}

_remote-recorder_options(){
  _recorder+=(
    "${_recorder_app}"
  )
  if [[ "${_buffer}" != "" ]]; then
    _recorder_opts+=(
      -k
        "${_buffer}"
    )
  fi
  _recorder_opts+=(
    -L
      "${_length}" 
    -b
      "${_rate}"
    -t
      "${_recorder_host}"
  )
}

_remote-encoder_options(){
  _encoder+=(
    "${_encoder_app}"
  )
  _encoder_opts+=(
    -t
      "${_encoder_host}" 
  )
}

_android-camera-recorder_options(){
  _recorder+=(
    "${_recorder_app}"
  )
  _recorder_opts+=(
    -L
      "${_length}" 
    -b
      "${_rate}"
    -k
      "${_buffer}"
  )
}

# Distributed record.
# $1: input video file
# $2: recording method (root)
# $2: delay seconds
# $3: output video file
_distributed_recorder() {
  local \
    _recorder_host="${1}" \
    _encoder_host="${2}" \
    _recorder_app="${3}" \
    _encoder_app="${4}" \
    _resolution="${5}" \
    _rate="${6}" \
    _length="${7}" \
    _buffer="${8}" \
    _out="${9}" \
    _recorder_opts=() \
    _encoder_opts=() \
    _encoder=() \
    _tmp
  _tmp="$( \
    mktemp \
      --suffix='.mp4')"
  rm \
    "${_tmp}"
  if [[ "${quiet}" != "y" ]]; then
    _recorder_opts+=(
      -v
    )
    _encoder_opts+=(
      -v
    )
  fi
  "_${_recorder_app}_options"
  "_${_encoder_app}_options"
  "${_recorder[@]}" \
    "${_recorder_opts[@]}" \
    "${_tmp}" || \
    true
  "${_encoder[@]}" \
    "${_encoder_opts[@]}" \
    "${_tmp}" \
    "${_out}"
  rm \
    "${_tmp}"
  _msg_info \
    "distributed recording ended, quitting."
}

_resolution_auto_detect() {
  local \
    _resolution
  if [[ $(command -v 'sudo') != "" ]]; then
    _resolution="$( \
      sudo \
        wm \
          size | \
        tail \
          -n \
          1 | \
	  awk \
	    '{print $3}')"
  else
    _resolution='720x1280'
  fi
  echo \
    "${_resolution}"
}

# Set defaults and, if present, overrides
# from program command line option parameters
_set_overrides() {
  _set_override \
    "recorder" \
    "host" \
    ""
  if [[ "${recorder_host}" == "" ]]; then
    _msg_error \
      "You must specify a recorder host."
  fi
  _set_override \
    "encoder" \
    "host" \
    ""
  if [[ "${encoder_host}" == "" ]]; then
    _msg_error \
      "You must specify an encoder host."
  fi
  _set_override \
    "recording" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "recorder" \
    "app" \
    "remote-recorder"
  _set_override \
    "encoder" \
    "app" \
    "remote-encoder"
  _set_override \
    "recording" \
    "resolution" \
    "$(_resolution_auto_detect)" 
  _set_override \
    "bit" \
    "rate" \
    "160000" # 160 Kbps
  _set_override \
    "recording" \
    "length" \
    "$(( 3 * 6 * 10 ))" # "$(( 24 * 60 * 60 ))" # 24 hours
  _set_override \
    "recording" \
    "buffer" \
    "${recording_length}"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Recording date:   $(_get "recording" "date")"
  _msg_info "            Recorder host:   $(_get "recorder" "host")"
  _msg_info "             Encoder host:   $(_get "encoder" "host")"
  _msg_info "             Recorder app:   $(_get "recorder" "app")"
  _msg_info "              Encoder app:   $(_get "encoder" "app")"
  _msg_info "                 Bit rate:   $(_get "bit" "rate")"
  _msg_info "     Recording resolution:   $(_get "recording" "resolution")"
  _msg_info "         Recording length:   $(_get "recording" "length")"
  _msg_info "         Recording buffer:   $(_get "recording" "buffer")"
  _msg_info "              Output file:   $(_get "out" "file")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Distributed recorder.

Usage:
  $(_get "app" "name")
    [options]
    (<out_file>)
  options:
     -t <recorder_host>   Recorder host.
                          Default: $(_get "recorder" "host")
     -e <encoder_host>    Target host.
                          Default: $(_get "encoder" "host")
     -R <recorder_app>    Recorder application to use.
                          Default: $(_get "recorder" "app")
     -E <encoder_app>    Recorder application to use.
                          Default: $(_get "recorder" "app")
     -s <widthxheight>    Recording resolution.
                          Default: $(_get "recording" "resolution")
     -b <bitrate>         Video bitrate.
                          Default: $(_get "bit" "rate").
     -L <length>          Length of the recording.
                          Default: $(_get "recording" "length").
     -k <buffer>          Buffer length of the recording.
                          Default: $(_get "recording" "buffer").
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:e:R:E:b:L:k:s:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_recorder_host="${OPTARG}" ;;
    e) override_encoder_host="${OPTARG}" ;;
    R) override_recorder_app="${OPTARG}" ;;
    E) override_encoder_app="${OPTARG}" ;;
    b) override_bit_rate="${OPTARG}" ;;
    L) override_recording_length="${OPTARG}" ;;
    k) override_recording_buffer="${OPTARG}" ;;
    s) override_recording_resolution="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _set_overrides && \
  _usage \
    1
out_file="${1}"
_set_overrides
_config_user_init \
  "$(_get "app" "name")"
_show_config
app_opts=(
  "${recorder_host}"
  "${encoder_host}"
  "${recorder_app}"
  "${encoder_app}"
  "${recording_resolution}"
  "${bit_rate}"
  "${recording_length}"
  "${recording_buffer}"
  "${out_file}"
)
_distributed_recorder \
  "${app_opts[@]}"
